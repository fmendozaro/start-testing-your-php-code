<?php
/**
 * Created by IntelliJ IDEA.
 * User: fer
 * Date: 10/23/17
 * Time: 2:09 PM
 */

use PHPUnit\Framework\TestCase;
use StartTestingPHP\Repositories\TaskRepository;

class TaskRepositoryTest extends TestCase
{

    private $dbConnection;
    private $subject;

    public function setUp()
    {
        $this->dbConnection = Mockery::mock(mysqli::class);
        $this->subject = new TaskRepository($this->dbConnection);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAllEmptyArrayWhenQueryFails(){

        $this->dbConnection->shouldReceive('query')
            ->with('SELECT note FROM tasks ORDER BY created DESC')
            ->andReturn(false);
        $this->assertSame([], $this->subject->all());

    }

    public function testAllWhenNoResultsReturnsEmpty()
    {
        $result = new stdClass();
        $result->num_rows = 0;

        $this->dbConnection->shouldReceive('query')
            ->with('SELECT note FROM tasks ORDER BY created DESC')
            ->andReturn($result);
        $this->assertSame([], $this->subject->all());
    }

    public function testAllReturnsTasks()
    {
        $result = Mockery::mock('mysql_result_mock')->shouldIgnoreMissing();
        $result->num_rows = 2;
        $result->shouldReceive('fetch_assoc')
            ->andReturn(
                ['id' => 1, 'note' => 'task 1'],
                ['id' => 2, 'note' => 'task 2'],
                false
            );
        $this->dbConnection->shouldReceive('query')
            ->with('SELECT note FROM tasks ORDER BY created DESC')
            ->andReturn($result);
        $actual = $this->subject->all();
        $this->assertCount(2, $actual);
        $this->assertEquals('task 1', $actual[0]->getNote());
        $this->assertEquals('task 2', $actual[1]->getNote());
        $result->shouldHaveReceived('free');
    }
}
